/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports) {

	'use strict';
	
	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	/**
	  * @author   milan(white gourd angel)
	  * @describe A fast way to copy text to clipboard with javascript,no flash, no dependencies, high performance
	  */
	
	var ClipBoard = (function () {
	  function ClipBoard() {
	    _classCallCheck(this, ClipBoard);
	  }
	
	  _createClass(ClipBoard, [{
	    key: 'createContentNode',
	    value: function createContentNode() {
	      /**
	       * @describe Create dom, For storing data to be copied
	       * @param    
	       * @return   dom
	       */
	      var copyDom = document.createElement('pre');
	      copyDom.style.position = 'absolute';
	      copyDom.style.left = '-9999px';
	      copyDom.style.top = '-9999px';
	      copyDom.style.width = '5px';
	      copyDom.style.height = '5px';
	      document.body.appendChild(copyDom);
	      return copyDom;
	    }
	  }, {
	    key: 'copy',
	    value: function copy(content) {
	      /**
	       * @describe copy 
	       * @param    content: Data for replication
	       * @return   
	       */
	      var copyDom = this.createContentNode();
	      copyDom.innerHTML = content;
	      var selection = window.getSelection();
	      var range = document.createRange();
	
	      range.selectNodeContents(copyDom);
	      selection.removeAllRanges();
	      selection.addRange(range);
	      document.execCommand('copy');
	
	      // destroy
	      this.destroy(copyDom);
	    }
	  }, {
	    key: 'destroy',
	    value: function destroy(dom) {
	      /**
	       * @describe The node is removed when copy complete 
	       * @param    dom
	       * @return   
	       */
	      document.body.removeChild(dom);
	    }
	  }, {
	    key: 'bind',
	    value: function bind(opt) {
	      /*opt.trigger.addEventListener("click", function(){
	      copt(content);
	      }*/
	    }
	  }]);
	
	  return ClipBoard;
	})();
	
	window.ClipBoard = new ClipBoard();

/***/ }
/******/ ]);
//# sourceMappingURL=clipboard.min.js.map